import json
from datetime import datetime, date, timedelta
from pathlib import Path
import streamlit as st

USER_DATA_FILE = Path('user_data.json')
FRIDGE_FILE = Path('fridge.json')

# JSON Îç∞Ïù¥ÌÑ∞ ÏûÖÏ∂úÎ†•
def load_data(path: Path, default):
    try:
        with path.open('r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return default

def save_data(path: Path, data):
    with path.open('w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# BMI/BMR Í≥ÑÏÇ∞
def calculate_inbody(user):
    try:
        height = float(user.get('height', 0))
        weight = float(user.get('weight', 0))
        age = int(user.get('age', 0))
        gender = str(user.get('gender', 'female')).lower()
        if height <= 0 or weight <= 0 or age <= 0:
            return None
        height_m = height / 100
        bmi = weight / (height_m ** 2)
        if gender == 'male':
            bmr = 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)
        else:
            bmr = 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)
        return {"bmi": round(bmi, 2), "bmr": round(bmr, 2)}
    except Exception:
        return None

# Î†àÏãúÌîº DB
def get_recipe_db():
    return {
        'ÏÉêÎü¨Îìú': {'ingredients': ['ÏÉÅÏ∂î', 'ÌÜ†ÎßàÌÜ†', 'Îã≠Í∞ÄÏä¥ÏÇ¥'], 'calories': 320, 'desc': 'Ï†ÄÏπºÎ°úÎ¶¨ Îã®Î∞±Ïßà ÏÉêÎü¨Îìú'},
        'ÌÜ†ÎßàÌÜ† ÌååÏä§ÌÉÄ': {'ingredients': ['ÌÜ†ÎßàÌÜ†', 'ÌååÏä§ÌÉÄ', 'Ïò¨Î¶¨Î∏åÏò§Ïùº'], 'calories': 550, 'desc': 'Í∞ÑÎã® ÌååÏä§ÌÉÄ'},
        'ÏïºÏ±Ñ ÏàòÌîÑ': {'ingredients': ['ÏñëÌåå', 'ÎãπÍ∑º', 'Í∞êÏûê'], 'calories': 200, 'desc': 'Îî∞ÎúªÌïú ÏàòÌîÑ'},
    }

# Î†àÏãúÌîº Îß§Ïπ≠
def match_recipes(fridge, user, target_min=None, target_max=None):
    recipes = get_recipe_db()
    user_conditions = set(user.get('conditions', []))
    fridge_items = set(fridge.keys())
    matched = []
    for name, info in recipes.items():
        ingredients = set(info['ingredients'])
        match_rate = int(len(ingredients & fridge_items) / len(ingredients) * 100)
        # ÏïåÎ†àÎ•¥Í∏∞/Í∏∞Ï†ÄÏßàÌôò ÌïÑÌÑ∞
        if user_conditions & ingredients:
            continue
        # ÏπºÎ°úÎ¶¨ ÌïÑÌÑ∞
        if target_min is not None and target_max is not None:
            if not (target_min <= info['calories'] <= target_max):
                continue
        matched.append({
            'name': name,
            'match_rate': match_rate,
            'calories': info['calories'],
            'desc': info['desc']
        })
    matched.sort(key=lambda x: x['match_rate'], reverse=True)
    return matched

# ÏÑ∏ÏÖò ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
if 'user' not in st.session_state:
    st.session_state.user = load_data(USER_DATA_FILE, default={})
if 'fridge' not in st.session_state:
    st.session_state.fridge = load_data(FRIDGE_FILE, default={})

st.set_page_config(page_title="Í±¥Í∞ï/ÎÉâÏû•Í≥†/ÏÜîÎ£®ÏÖò", page_icon="ü•ó", layout="centered")

st.title("ü•ó Í±¥Í∞ï¬∑ÎÉâÏû•Í≥†¬∑ÏÜîÎ£®ÏÖò Ïï±")
menu = st.sidebar.radio("Î©îÎâ¥", ["Î™∏ ÏÉÅÌÉú ÏûÖÎ†•", "ÌôúÎ†•ÏßïÌõÑ ÏûÖÎ†•", "ÎÉâÏû•Í≥† Í¥ÄÎ¶¨", "Ïú†ÌÜµÍ∏∞Ìïú Ï≤¥ÌÅ¨", "ÏÜîÎ£®ÏÖò Ï∂îÏ≤ú"])

if menu == "Î™∏ ÏÉÅÌÉú ÏûÖÎ†•":
    st.subheader("üßç Ïã†Ï≤¥ Ï†ïÎ≥¥")
    user = st.session_state.user
    with st.form("body_form"):
        col1, col2 = st.columns(2)
        with col1:
            height = st.number_input("ÌÇ§ (cm)", min_value=0.0, step=0.1, value=float(user.get('height', 0)))
            age = st.number_input("ÎÇòÏù¥ (ÏÑ∏)", min_value=0, step=1, value=int(user.get('age', 0)))
        with col2:
            weight = st.number_input("Ï≤¥Ï§ë (kg)", min_value=0.0, step=0.1, value=float(user.get('weight', 0)))
            gender = st.selectbox("ÏÑ±Î≥Ñ", ["female", "male"], index=(1 if str(user.get('gender', 'female')).lower()=='male' else 0))
        conditions_in = st.text_input("Í∏∞Ï†ÄÏßàÌôò (ÏΩ§Îßà Íµ¨Î∂Ñ)", value=", ".join(user.get('conditions', [])))
        meds_in = st.text_input("Î≥µÏö©Ï§ëÏù∏ ÏïΩ (ÏΩ§Îßà Íµ¨Î∂Ñ)", value=", ".join(user.get('meds', [])))
        submitted = st.form_submit_button("Ï†ÄÏû•")
    if submitted:
        st.session_state.user = {
            'height': height,
            'weight': weight,
            'age': int(age),
            'gender': gender,
            'conditions': [s.strip() for s in conditions_in.split(',') if s.strip()],
            'meds': [s.strip() for s in meds_in.split(',') if s.strip()],
        }
        save_data(USER_DATA_FILE, st.session_state.user)
        st.success("Ïã†Ï≤¥ Ï†ïÎ≥¥ Ï†ÄÏû• ÏôÑÎ£å!")
    stats = calculate_inbody(st.session_state.user)
    if stats:
        st.info(f"ÌòÑÏû¨ BMI: {stats['bmi']}, BMR: {stats['bmr']} kcal")

elif menu == "ÌôúÎ†•ÏßïÌõÑ ÏûÖÎ†•":
    st.subheader("üíì ÌôúÎ†•ÏßïÌõÑ")
    user = st.session_state.user.copy()
    with st.form("vitals_form"):
        bp = st.text_input("ÌòàÏïï", value=user.get('blood_pressure', ''))
        hr = st.number_input("Ïã¨Î∞ïÏàò", min_value=0, step=1, value=int(user.get('heart_rate', 0)))
        temp = st.number_input("Ï≤¥Ïò®", min_value=0.0, step=0.1, value=float(user.get('temperature', 0.0)))
        bs = st.number_input("ÌòàÎãπ", min_value=0.0, step=0.1, value=float(user.get('blood_sugar', 0.0)))
        sleep = st.number_input("ÏàòÎ©¥ÏãúÍ∞Ñ", min_value=0.0, step=0.5, value=float(user.get('sleep_hours', 0.0)))
        cond = st.slider("Ïò§Îäò Ïª®ÎîîÏÖò", min_value=1, max_value=10, value=int(user.get('condition_score', 5)))
        submitted = st.form_submit_button("Ï†ÄÏû•")
    if submitted:
        user.update({
            'blood_pressure': bp,
            'heart_rate': int(hr),
            'temperature': float(temp),
            'blood_sugar': float(bs),
            'sleep_hours': float(sleep),
            'condition_score': int(cond),
            'vitals_updated_at': datetime.now().isoformat(timespec='seconds')
        })
        st.session_state.user = user
        save_data(USER_DATA_FILE, user)
        st.success("ÌôúÎ†•ÏßïÌõÑ Ï†ÄÏû• ÏôÑÎ£å!")

elif menu == "ÎÉâÏû•Í≥† Í¥ÄÎ¶¨":
    st.subheader("üßä ÎÉâÏû•Í≥† Ïû¨Î£å Í¥ÄÎ¶¨")
    fridge = st.session_state.fridge
    if fridge:
        st.dataframe([{'Ïû¨Î£å': k, **v} for k, v in fridge.items()], use_container_width=True)
    with st.form("fridge_form"):
        item = st.text_input("Ïû¨Î£å Ïù¥Î¶Ñ")
        quantity = st.text_input("Ïñë")
        exp = st.date_input("Ïú†ÌÜµÍ∏∞Ìïú", value=date.today())
        action = st.selectbox("ÏûëÏóÖ", ["Ï∂îÍ∞Ä/ÎçÆÏñ¥Ïì∞Í∏∞", "ÏÇ≠Ï†ú"])
        submitted = st.form_submit_button("Ïã§Ìñâ")
    if submitted:
        fridge = st.session_state.fridge.copy()
        if action == "ÏÇ≠Ï†ú":
            fridge.pop(item, None)
        else:
            fridge[item] = {'quantity': quantity, 'exp_date': exp.isoformat()}
        st.session_state.fridge = fridge
        save_data(FRIDGE_FILE, fridge)
        st.success("Î≥ÄÍ≤Ω ÏôÑÎ£å!")

elif menu == "Ïú†ÌÜµÍ∏∞Ìïú Ï≤¥ÌÅ¨":
    st.subheader("‚è∞ Ïú†ÌÜµÍ∏∞Ìïú Ï≤¥ÌÅ¨")
    fridge = st.session_state.fridge
    if not fridge:
        st.info("Îì±Î°ùÎêú Ïû¨Î£åÍ∞Ä ÏóÜÏäµÎãàÎã§.")
    else:
        today = datetime.now().date()
        rows = []
        for item, info in fridge.items():
            try:
                exp = datetime.strptime(info['exp_date'], '%Y-%m-%d').date()
                delta = (exp - today).days
                status = "‚ùå ÎßåÎ£å" if delta < 0 else (f"‚ö†Ô∏è ÏûÑÎ∞ï (D-{delta})" if delta <= 3 else f"‚úÖ Ïó¨Ïú† (D+{delta})")
                rows.append({'Ïû¨Î£å': item, 'Ïñë': info['quantity'], 'Ïú†ÌÜµÍ∏∞Ìïú': exp.isoformat(), 'ÎÇ®ÏùÄÏùºÏàò': delta, 'ÏÉÅÌÉú': status})
            except:
                rows.append({'Ïû¨Î£å': item, 'Ïñë': info['quantity'], 'Ïú†ÌÜµÍ∏∞Ìïú': info['exp_date'], 'ÎÇ®ÏùÄÏùºÏàò': None, 'ÏÉÅÌÉú': 'ÌòïÏãù Ïò§Î•ò'})
        rows.sort(key=lambda r: (r['ÎÇ®ÏùÄÏùºÏàò'] is None, r['ÎÇ®ÏùÄÏùºÏàò'] if r['ÎÇ®ÏùÄÏùºÏàò'] is not None else 10**9))
        st.dataframe(rows, use_container_width=True)

elif menu == "ÏÜîÎ£®ÏÖò Ï∂îÏ≤ú":
    st.subheader("üß™ ÏÜîÎ£®ÏÖò Ï∂îÏ≤ú")
    stats = calculate_inbody(st.session_state.user)
    fridge = st.session_state.fridge
    user = st.session_state.user
    if stats:
        st.write(f"**ÌòÑÏû¨ BMI:** {stats['bmi']} | **BMR:** {stats['bmr']} kcal")
        goal = st.selectbox("Î™©Ìëú", ["Í∞êÎüâ", "Ïú†ÏßÄ", "Ï¶ùÎüâ"], index=0)
        factor = 0.8 if goal == "Í∞êÎüâ" else (1.0 if goal == "Ïú†ÏßÄ" else 1.2)
        target_min = int(stats['bmr'] * (factor - 0.1))
        target_max = int(stats['bmr'] * factor)
        st.write(f"Î™©Ìëú ÏπºÎ°úÎ¶¨ Î≤îÏúÑ: {target_min} ~ {target_max} kcal")
        matches = match_recipes(fridge, user, target_min, target_max)
        if matches:
            for m in matches:
                st.markdown(f"**{m['name']}** ‚Äî {m['match_rate']}% ÏùºÏπò, {m['calories']} kcal\n- {m['desc']}")
        else:
            st.info("Ï°∞Í±¥Ïóê ÎßûÎäî Î†àÏãúÌîºÍ∞Ä ÏóÜÏäµÎãàÎã§.")
    else:
        st.info("Î®ºÏ†Ä 'Î™∏ ÏÉÅÌÉú ÏûÖÎ†•'ÏóêÏÑú Ï†ïÎ≥¥Î•º Ï†ÄÏû•ÌïòÏÑ∏Ïöî.")

